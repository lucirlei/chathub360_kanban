<% content_for(:title) do %>
  Cloud Configuration Settings
<% end %>
<header class="main-content__header" role="banner">
  <h1 class="main-content__page-title" id="page-title">
    <%= content_for(:title) %>
  </h1>
</header>
<section class="main-content__body">
  <%= form_with url: super_admin_cloud_configs_path, method: :post do |form| %>
    <% @allowed_configs.each do |key| %>
      <div class="flex mb-8">
        <div class="field-unit__label">
          <%= form.label "app_config[#{key}]", @installation_configs[key]&.dig('display_title') || key %>
        </div>
        <div class="-mt-2 field-unit__field w-full">
          <% if @installation_configs[key]&.dig('type') == 'feature_list' %>
            <div class="mt-2 p-4 border border-slate-100 rounded-md">
              <div id="features-container" class="mb-4">
                <% 
                  features_hash = @app_config[key].is_a?(Hash) ? @app_config[key] : {}
                  # Extrair features do primeiro plano encontrado ou usar array vazio
                  features = if features_hash.present?
                              features_hash.values.first || []
                            else
                              []
                            end
                %>
                <% available_features = ["help_center", "campaigns", "team_management", "channel_twitter", "channel_facebook", "channel_email", "custom_attributes", "reports"] %>
                <div class="mb-4">
                  <h3 class="text-sm font-medium mb-2">Available Features:</h3>
                  <div class="flex flex-wrap gap-2">
                    <% available_features.each do |feature| %>
                      <div class="feature-item border rounded-md p-2 cursor-pointer hover:bg-slate-100 <%= features.include?(feature) ? 'bg-blue-50' : '' %>" 
                           data-feature="<%= feature %>"
                           onclick="toggleFeature(this)">
                        <%= feature %>
                      </div>
                    <% end %>
                  </div>
                </div>
                <h3 class="text-sm font-medium mb-2">Selected Features:</h3>
                <div id="selected-features" class="flex flex-wrap gap-2 mb-2">
                  <% features.each do |feature| %>
                    <div class="selected-feature bg-blue-50 border rounded-md p-2 flex items-center">
                      <span><%= feature %></span>
                      <button type="button" class="ml-2 text-red-500" onclick="removeFeature(this)">×</button>
                    </div>
                  <% end %>
                </div>
                <div class="mt-4 bg-blue-50 border-blue-200 border p-3 rounded">
                  <p class="text-sm text-blue-800">
                    <strong>Note:</strong> These features will be applied to all plans. Features are listed in a per-plan basis in the database, but this interface simplifies by applying the same set to all plans.
                  </p>
                </div>
                <input type="hidden" id="features-input" name="app_config[<%= key %>]" value="<%= features.to_json %>">
              </div>
            </div>
          <% elsif @installation_configs[key]&.dig('type') == 'plans_list' %>
            <div class="mt-2 p-4 border border-slate-100 rounded-md">
              <div id="plans-container" class="mb-4">
                <% 
                  # Ensure plans is an array of plans
                  plans = if @app_config[key].is_a?(Array)
                    @app_config[key]
                  elsif @app_config[key].is_a?(Hash)
                    [@app_config[key]]
                  else
                    []
                  end
                %>
                <div id="plans-list">
                  <% plans.each_with_index do |plan, index| %>
                    <div class="plan-item p-3 border rounded-md mb-3">
                      <div class="flex justify-between items-center mb-2">
                        <h3 class="font-medium">Plan #<%= index + 1 %></h3>
                        <button type="button" class="text-red-500" onclick="removePlan(this)">Remove</button>
                      </div>
                      <div class="grid grid-cols-2 gap-4">
                        <div>
                          <label class="block text-sm mb-1">Name</label>
                          <input type="text" class="w-full border p-2 rounded-md plan-name" value="<%= plan['name'] %>" onchange="updatePlansInput()">
                        </div>
                        <div>
                          <label class="block text-sm mb-1">Default Quantity</label>
                          <input type="number" class="w-full border p-2 rounded-md plan-quantity" value="<%= plan['default_quantity'] || 5 %>" onchange="updatePlansInput()">
                        </div>
                        <div>
                          <label class="block text-sm mb-1">Product ID</label>
                          <input type="text" class="w-full border p-2 rounded-md plan-product" value="<%= (plan['product_id'] || []).first %>" onchange="updatePlansInput()">
                        </div>
                        <div>
                          <label class="block text-sm mb-1">Price ID</label>
                          <input type="text" class="w-full border p-2 rounded-md plan-price" value="<%= (plan['price_ids'] || []).first %>" onchange="updatePlansInput()">
                        </div>
                      </div>
                    </div>
                  <% end %>
                </div>
                <button type="button" class="bg-slate-100 p-2 rounded-md hover:bg-slate-200" onclick="addPlan()">Add Plan</button>
                <input type="hidden" id="plans-input" name="app_config[<%= key %>]" value="<%= plans.to_json %>">
              </div>
            </div>
          <% elsif @installation_configs[key]&.dig('type') == 'boolean' %>
            <%= form.select "app_config[#{key}]", 
              [["True", true], ["False", false]], 
              { selected: ActiveModel::Type::Boolean.new.cast(@app_config[key]) },
              class: "mt-2 border border-slate-100 p-1 rounded-md" 
            %>
          <% elsif @installation_configs[key]&.dig('type') == 'select' %>
            <div class="mt-2">
              <%= form.select "app_config[#{key}]", 
                @installation_configs[key]['options'].map { |option| 
                  [option['label'], option['value'], { title: option['description'] }] 
                }, 
                { selected: @app_config[key] },
                class: "border border-slate-100 p-1 rounded-md w-full" 
              %>
              <div class="mt-3">
                <% @installation_configs[key]['options'].each do |option| %>
                  <div class="flex items-start mb-2">
                    <div class="w-4 h-4 mt-1 mr-2 flex-shrink-0">
                      <% if @app_config[key] == option['value'] %>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="text-blue-600">
                          <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z" clip-rule="evenodd" />
                        </svg>
                      <% else %>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="text-slate-300">
                          <path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm0 1.5a8.25 8.25 0 100 16.5 8.25 8.25 0 000-16.5z" clip-rule="evenodd" />
                        </svg>
                      <% end %>
                    </div>
                    <div>
                      <p class="font-medium text-sm"><%= option['label'] %></p>
                      <p class="text-xs text-slate-500"><%= option['description'] %></p>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% elsif @installation_configs[key]&.dig('type') == 'code' %>
            <%= form.text_area "app_config[#{key}]", 
                value: @app_config[key], 
                rows: 12,
                wrap: 'off',
                class: "mt-2 border font-mono text-xs border-slate-100 p-1 rounded-md overflow-scroll"
            %>
          <% else %>
            <%= form.text_field "app_config[#{key}]", value: @app_config[key], class: "w-full" %>
          <% end %>
          <%if @installation_configs[key]&.dig('description').present? %>
            <p class="pt-2 text-xs italic text-slate-400">
              <%= @installation_configs[key]&.dig('description') %>
            </p>
          <% end %>
        </div>
      </div>
    <% end %>
    <div class="form-actions">
      <%= form.submit "Submit" %>
    </div>
  <% end %>
</section>

<script>
  // Feature List Functions
  function toggleFeature(element) {
    const feature = element.dataset.feature;
    element.classList.toggle('bg-blue-50');
    
    const selectedContainer = document.getElementById('selected-features');
    const existingFeature = Array.from(selectedContainer.children)
      .find(child => child.querySelector('span').textContent === feature);
    
    if (existingFeature) {
      selectedContainer.removeChild(existingFeature);
    } else {
      const featureElement = document.createElement('div');
      featureElement.className = 'selected-feature bg-blue-50 border rounded-md p-2 flex items-center';
      featureElement.innerHTML = `
        <span>${feature}</span>
        <button type="button" class="ml-2 text-red-500" onclick="removeFeature(this)">×</button>
      `;
      selectedContainer.appendChild(featureElement);
    }
    
    updateFeaturesInput();
  }
  
  function removeFeature(button) {
    const featureItem = button.parentElement;
    const feature = featureItem.querySelector('span').textContent;
    
    // Unselect the feature in the available list
    const availableFeature = document.querySelector(`.feature-item[data-feature="${feature}"]`);
    if (availableFeature) {
      availableFeature.classList.remove('bg-blue-50');
    }
    
    featureItem.remove();
    updateFeaturesInput();
  }
  
  function updateFeaturesInput() {
    const features = Array.from(document.getElementById('selected-features').children)
      .map(child => child.querySelector('span').textContent);
    
    document.getElementById('features-input').value = JSON.stringify(features);
  }
  
  // Plans Functions
  function addPlan() {
    const plansList = document.getElementById('plans-list');
    const planCount = plansList.children.length;
    
    const planItem = document.createElement('div');
    planItem.className = 'plan-item p-3 border rounded-md mb-3';
    planItem.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <h3 class="font-medium">Plan #${planCount + 1}</h3>
        <button type="button" class="text-red-500" onclick="removePlan(this)">Remove</button>
      </div>
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-sm mb-1">Name</label>
          <input type="text" class="w-full border p-2 rounded-md plan-name" value="Pro" onchange="updatePlansInput()">
        </div>
        <div>
          <label class="block text-sm mb-1">Default Quantity</label>
          <input type="number" class="w-full border p-2 rounded-md plan-quantity" value="5" onchange="updatePlansInput()">
        </div>
        <div>
          <label class="block text-sm mb-1">Product ID</label>
          <input type="text" class="w-full border p-2 rounded-md plan-product" value="prod_RwBkm5HAKxNltJ" onchange="updatePlansInput()">
        </div>
        <div>
          <label class="block text-sm mb-1">Price ID</label>
          <input type="text" class="w-full border p-2 rounded-md plan-price" value="price_1R2JN5HzFjnmzfVGAlCIqc9k" onchange="updatePlansInput()">
        </div>
      </div>
    `;
    
    plansList.appendChild(planItem);
    updatePlansInput();
  }
  
  function removePlan(button) {
    const planItem = button.closest('.plan-item');
    planItem.remove();
    updatePlansInput();
  }
  
  function updatePlansInput() {
    const plans = Array.from(document.getElementById('plans-list').children)
      .map(planItem => {
        return {
          name: planItem.querySelector('.plan-name').value,
          default_quantity: parseInt(planItem.querySelector('.plan-quantity').value, 10),
          product_id: [planItem.querySelector('.plan-product').value],
          price_ids: [planItem.querySelector('.plan-price').value]
        };
      });
    
    document.getElementById('plans-input').value = JSON.stringify(plans);
  }
  
  // Initialize inputs on load
  document.addEventListener('DOMContentLoaded', function() {
    // Add change event listeners to all existing plan inputs
    document.querySelectorAll('.plan-name, .plan-quantity, .plan-product, .plan-price').forEach(input => {
      input.addEventListener('change', updatePlansInput);
    });
    
    updateFeaturesInput();
    updatePlansInput();
  });
</script> 

<!-- Overlay para verificação de token -->
<div id="tokenOverlay" class="fixed inset-0 bg-slate-900/90 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-xl p-6 max-w-md w-full mx-4">
    <div class="text-center mb-6">
      <img src="https://kanbanparachatwoot.com.br/wp-content/uploads/2025/02/image-5-114.png" alt="Logo" class="mx-auto h-12 mb-4">
      <h2 class="text-xl font-bold text-slate-800 mb-2">Ativação de Módulos StackLab</h2>
      <p class="text-slate-600 mb-3">Insira seu token de cliente para ativar os módulos.</p>
      <p class="text-sm text-slate-500 mb-3">Os Módulos StackLab permitem personalizar seu Chatwoot com scripts avançados, temas customizados e integrações exclusivas.</p>
      <div class="flex items-center justify-center space-x-2 text-xs text-slate-500">
        <span class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/></svg>Verificado</span>
        <span class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/></svg>Seguro</span>
        <span class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor"><path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/></svg>Customizável</span>
      </div>
    </div>
    
    <div class="mb-4">
      <input type="text" id="clientToken" placeholder="Token de ativação" class="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
      <div id="tokenError" class="text-red-600 text-sm mt-1 hidden">Token inválido. Por favor, tente novamente.</div>
    </div>
    
    <div class="flex justify-between items-center">
      <a href="https://pay.kiwify.com.br/uYYQjiP" target="_blank" class="text-blue-600 text-sm hover:underline">Não tem um token?</a>
      <button id="activateBtn" class="px-5 py-2.5 bg-[#4f46e5] text-white font-medium rounded-md hover:bg-[#4338ca] focus:ring-4 focus:ring-indigo-300 flex items-center shadow-md">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path d="M10 2a5 5 0 00-5 5v2a2 2 0 00-2 2v5a2 2 0 002 2h10a2 2 0 002-2v-5a2 2 0 00-2-2H7V7a3 3 0 015.905-.75 1 1 0 001.937-.5A5.002 5.002 0 0010 2z" />
        </svg>
        <span>Ativar Módulos</span>
        <span id="activateSpinner" class="hidden ml-2">
          <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const savedToken = localStorage.getItem('stacklabModulesToken');
    const tokenOverlay = document.getElementById('tokenOverlay');
    const clientToken = document.getElementById('clientToken');
    const tokenError = document.getElementById('tokenError');
    const activateBtn = document.getElementById('activateBtn');
    const activateSpinner = document.getElementById('activateSpinner');
    
    // Verificar se já existe um token salvo
    if (savedToken) {
      verifyToken(savedToken);
    }
    
    // Função para verificar o token no Supabase
    async function verifyToken(token) {
      activateBtn.disabled = true;
      activateSpinner.classList.remove('hidden');
      tokenError.classList.add('hidden');
      
      try {
        const response = await fetch(`https://qzxmmoycwvsujblxrzni.supabase.co/rest/v1/clientes_modulos?select=*&token=eq.${encodeURIComponent(token)}`, {
          method: 'GET',
          headers: {
            'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF6eG1tb3ljd3ZzdWpibHhyem5pIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY3MDE4OTMsImV4cCI6MjA1MjI3Nzg5M30.NF8T7ZUyrtGXZ6lS-nygLJIB6YLqfiGG6jS05DAjmSU',
            'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF6eG1tb3ljd3ZzdWpibHhyem5pIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY3MDE4OTMsImV4cCI6MjA1MjI3Nzg5M30.NF8T7ZUyrtGXZ6lS-nygLJIB6YLqfiGG6jS05DAjmSU'
          }
        });
        
        const data = await response.json();
        
        // Verificar se existe pelo menos um resultado
        if (data && data.length > 0) {
          // Token válido - salvar e esconder overlay
          localStorage.setItem('stacklabModulesToken', token);
          tokenOverlay.classList.add('hidden');
        } else {
          // Token inválido
          tokenError.classList.remove('hidden');
          localStorage.removeItem('stacklabModulesToken');
        }
      } catch (error) {
        console.error('Erro ao verificar token:', error);
        tokenError.textContent = 'Erro ao verificar token. Tente novamente.';
        tokenError.classList.remove('hidden');
      } finally {
        activateBtn.disabled = false;
        activateSpinner.classList.add('hidden');
      }
    }
    
    // Evento de clique no botão de ativação
    activateBtn.addEventListener('click', function() {
      const token = clientToken.value.trim();
      if (token) {
        verifyToken(token);
      } else {
        tokenError.textContent = 'Por favor, insira um token.';
        tokenError.classList.remove('hidden');
      }
    });
    
    // Evento para verificar ao pressionar Enter
    clientToken.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        const token = clientToken.value.trim();
        if (token) {
          verifyToken(token);
        } else {
          tokenError.textContent = 'Por favor, insira um token.';
          tokenError.classList.remove('hidden');
        }
      }
    });
  });
</script> 